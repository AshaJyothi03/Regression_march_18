import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import math
import os

df=pd.read_csv('SmartWatch_Health_Data.csv')
print(df.head(5))
print(df.shape[0])

data=df['User ID'].drop_duplicates()
print(data)

# Calculate missing values in the unique User IDs Series (data) and display it
data.isna().sum()

# Drop rows with missing User IDs in the original DataFrame
data.dropna(inplace=True)
print(data)

# Assuming the column containing 'ERROR' is named 'Column_Name'
df['Sleep Duration (hours)'] = df['Sleep Duration (hours)'].replace('ERROR', np.nan)
df['Stress Level'] = df['Stress Level'].replace('Very High', '20')
print(df['Sleep Duration (hours)'])
print(df['Stress Level'])

# Drop rows where all values are NaN
df_dropped_all_nan_cols = df.dropna(how='any',axis=0)
df_dropped_all_nan_cols


from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Prepare the data
x = df_dropped_all_nan_cols[['Heart Rate (BPM)','Blood Oxygen Level (%)','Step Count','Sleep Duration (hours)']]  # Features should be a 2D array
y = df_dropped_all_nan_cols['Stress Level']  # Target variable

# Create and fit the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)
y_pred

mean_squared_error(y_test,y_pred)

#RMSE value

# Convert 'y_test' to numeric type before performing calculations
y_test = pd.to_numeric(y_test)

# Calculate RMSE
rmse = np.sqrt(np.mean((y_test - y_pred)**2))

print("Final rmse value is =", rmse)

# Assuming 'Heart Rate (BPM)' is a representative feature for visualization
plt.scatter(X_test['Heart Rate (BPM)'], y_test)
plt.plot(X_test['Heart Rate (BPM)'], y_pred, color='red')  # Plot predictions against the same feature
plt.xlabel("Heart Rate (BPM)")
plt.ylabel("Predicted Stress Level")
plt.title("Actual vs Predicted Stress Level")
plt.show()


# Assuming 'Heart Rate (BPM)' is a representative feature for visualization
plt.scatter(X_test['Sleep Duration (hours)'], y_test)
plt.plot(X_test['Sleep Duration (hours)'], y_pred, color='red')  # Plot predictions against the same feature
plt.xlabel("Sleep Duration (hours)")
plt.ylabel("Predicted Stress Level")
plt.title("Actual vs Predicted Stress Level")
plt.legend()
plt.show()
